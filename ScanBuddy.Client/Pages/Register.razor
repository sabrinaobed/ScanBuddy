@page "/register"
@inject ClassLibrary.ScanBuddy.Frontend.Interfaces.IAuthService AuthService
@inject NavigationManager Navigation

<div class="register-page">
    <div class="register-container">
        <!-- Left side with logo -->
        <div class="register-left">
            <img src="pictures/ScanBuddyLogo.svg" alt="ScanBuddy Logo" class="logo" />
        </div>

        <!-- Right side with form and logic -->
        <div class="register-right">
            @if (!otpSent && !registrationSuccess)
            {
                <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <h3 class="text-center mb-4 form-title">Create Your Account</h3>

                    <div class="mb-3">
                        <label>Full Name</label>
                        <InputText @bind-Value="registerModel.FullName" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label>Email</label>
                        <InputText @bind-Value="registerModel.Email" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label>Password</label>
                        <div class="input-group">
                            <InputText @bind-Value="registerModel.Password" type="@passwordType" class="form-control" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="TogglePassword">
                                <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label>Confirm Password</label>
                        <div class="input-group">
                            <InputText @bind-Value="registerModel.ConfirmPassword" type="@confirmPasswordType" class="form-control" />
                            <button type="button" class="btn btn-outline-secondary" @onclick="ToggleConfirmPassword">
                                <i class="fas @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label>Role</label>
                        <InputSelect @bind-Value="registerModel.Role" class="form-control">
                            <option value="Employee">Employee</option>
                            <option value="Admin">Admin</option>
                            <option value="Accountant">Accountant</option>
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label>Account Type</label>
                        <InputSelect @bind-Value="registerModel.AccountType" class="form-control">
                            <option value="Personal">Personal</option>
                            <option value="Company">Company</option>
                        </InputSelect>
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="registerModel.EnableMfa" class="form-check-input" />
                        <label class="form-check-label">Enable MFA (OTP on Login)</label>
                    </div>

                    <button type="submit" class="btn gradient-btn w-100 text-white">Register</button>
                </EditForm>
            }
            else if (otpSent && !registrationSuccess)
            {
                <EditForm Model="otpModel" OnValidSubmit="HandleVerifyOtp">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <p class="alert alert-info">We’ve sent a verification code to your email. Please enter it below.</p>

                    <div class="mb-3">
                        <label>Email</label>
                        <InputText @bind-Value="otpModel.Email" class="form-control" readonly />
                    </div>

                    <div class="mb-3 d-flex align-items-center">
                        <div class="flex-grow-1 me-2">
                            <label>OTP Code</label>
                            <InputText @bind-Value="otpModel.OtpCode" class="form-control" />
                        </div>
                        <div class="mt-4">
                            <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="HandleResendOtp">Resend OTP</button>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-success w-100">Verify OTP</button>
                </EditForm>
            }
            else if (registrationSuccess)
            {
                <div class="alert alert-success text-center">
                    🎉 You’re successfully registered with <strong>ScanBuddy</strong>!
                    <br />
                    <button class="btn gradient-btn mt-3 text-white" @onclick='() => Navigation.NavigateTo("/login")'>
                        Go to Login
                    </button>
                </div>
            }

            <!-- ✅ UPDATED: Show user message only when needed -->
            @if (!string.IsNullOrEmpty(message) && !otpSent && !registrationSuccess)
            {
                <div class="alert alert-info mt-3 text-center">@message</div>
            }
        </div>
    </div>
</div>

@code {
    private ClassLibrary.ScanBuddy.Frontend.DTOs.RegistrationDTO registerModel = new();
    private ClassLibrary.ScanBuddy.Frontend.DTOs.VerifyRegistrationOtpDTO otpModel = new();

    private bool otpSent = false;
    private bool registrationSuccess = false;

    // ✅ CHANGED: message is now plain string from a typed API response
    private string message;

    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private string passwordType => showPassword ? "text" : "password";
    private string confirmPasswordType => showConfirmPassword ? "text" : "password";

    private void TogglePassword() => showPassword = !showPassword;
    private void ToggleConfirmPassword() => showConfirmPassword = !showConfirmPassword;

    private async Task HandleRegister()
    {
        var result = await AuthService.RegisterAsync(registerModel);
        message = result.Message;

        if (result.Message.ToLower().Contains("verify") || result.Message.ToLower().Contains("otp"))
        {
            otpSent = true;
            otpModel.Email = registerModel.Email;
        }
    }


    private async Task HandleVerifyOtp()
    {
        var result = await AuthService.VerifyRegistrationOtpAsync(otpModel);
        message = result.Message;

        if (result.Message.ToLower().Contains("verified"))
        {
            registrationSuccess = true;
        }
    }


    private async Task HandleResendOtp()
    {
        // ✅ UPDATED: Use strongly typed ApiResponse object
        var result = await AuthService.RegisterAsync(registerModel);
        message = result?.Message;
    }
}
